{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Dinh Dang's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/rust-setup/","title":"Setting up a dev container for Rust","text":"<ul> <li>Primary author: Dinh Dang</li> <li>Reviewer: Joseph Pham</li> </ul>"},{"location":"tutorials/rust-setup/#prerequisites","title":"Prerequisites","text":"<ol> <li>Git: Used as a tool for modern source code management. Download and install Git. </li> <li>Visual Studio Code (VS Code): An integrated development environment that assists with code writing. Download and install VS Code.</li> <li>GitHub Account: A cloud based platform to host repositories. Create an account or log into Github. </li> <li>Docker: A tool to help automate the deployment of applications. Download and install Docker.</li> </ol>"},{"location":"tutorials/rust-setup/#creating-a-new-dev-container-in-rust","title":"Creating a new Dev Container in Rust","text":""},{"location":"tutorials/rust-setup/#step-1-create-a-new-project-directory","title":"Step 1: Create a New Project Directory","text":"<ol> <li> <p>Open terminal</p> </li> <li> <p>Create a new directory:  </p> bash<pre><code>mkdir my-new-rust-project\ncd my-new-rust-project\n</code></pre> </li> <li> <p>Initialize a Git Repository:  </p> bash<pre><code>git init  \n</code></pre> </li> </ol> <p>Note</p> <p>Make sure your default branch is <code>main</code>. Since <code>main</code> has become an industry wide standard, whereas other conventions like <code>master</code> has a historical context with oppression</p> <p>If main is not the default branch use this: bash<pre><code>git branch -M main\n</code></pre></p>"},{"location":"tutorials/rust-setup/#step-2-create-a-dev-container-for-rust","title":"Step 2: Create a Dev Container for Rust","text":"<p>In VS Code open the  directory. You can do this via: File &gt; Open Folder. <p>Install \"Dev Container\" in the extension portion of VS Code</p> <p>Create a .devcontainer directory in the root of your project with the following file inside of this \"hidden\" configuration directory:     <pre><code>.devcontainer/devcontainer.json\n</code></pre></p> <p>In this devcontainer file we define the configuration for our development environment. Add this to devcontainer.json devcontainer.json<pre><code>{\n    \"name\": \"Rust Dev Container\",\n    \"image\": \"mcr.microsoft.com/devcontainers/rust:latest\",\n    \"customizations\": {\n        \"vscode\": {\n            \"extensions\": [\n                \"rust-lang.rust-analyzer\"\n            ]\n        }\n    },\n    \"postCreateCommand\": \"cargo install cargo-edit\"\n}\n</code></pre></p> <ul> <li><code>name</code>: The name of the Dev Container project</li> <li><code>image</code>: The official Rust Dev Container image which is given by Microsoft</li> <li><code>customizations.vscode.extensions</code>: Ensures that the Rust extension is downloaded</li> <li><code>postCreateCommand</code>: runs the <code>cargo install cargo-edit</code> command after the container is started so the user has access to it if they need</li> </ul>"},{"location":"tutorials/rust-setup/#step-3-open-the-project-in-the-dev-container","title":"Step 3: Open the Project in the Dev Container","text":"<p>Reopen the container by using the command palette (Ctrl+Shift+P or Cmd+Shift+P on macOS) and select: Dev Containers: Reopen in Container. </p> <p>Once the new Dev Container is setup, close out of the current terminal and open a new terminal tab within VS Code and inputting <code>rustc --version</code> to see if the container is running the newest version of Rust.</p>"},{"location":"tutorials/rust-setup/#step-4-hello-world-in-rust","title":"Step 4: Hello World in Rust","text":"<ol> <li> <p>Create a new binary project:     bash<pre><code>cargo new hello_world --vcs none  \n</code></pre></p> <p>This will create a new directory named hello world without git initialization    </p> </li> <li> <p>Editing the Main file:</p> <p>Within the '''src/main.rs''' file, there will be a basic Hello World! templatte that looks something like this</p> main.rs<pre><code>fn main() {\n    println!(\"Hello, world!\");\n}\n</code></pre> <p>Edit the file such that it says 'Hello COMP423' instead and save it, so that it looks something like this</p> main.rs<pre><code>fn main() {\n    println!(\"Hello COMP423\");\n}\n</code></pre> </li> <li> <p>Navigate into the the project and compile using <code>cargo build</code>: </p> bash<pre><code>cd hello_world\ncargo build\n</code></pre> <p>This will compile the code and produce an executable binary in the <code>target/debug</code> directory.</p> </li> <li> <p>Running using gcc style command (optional):</p> bash<pre><code>./target/debug/hello_world    \n</code></pre> <p>This manually runs the code in a gcc-style command. But the code can also be ran using cargo as seen below.</p> </li> <li> <p>Run the project using <code>cargo run</code>:</p> bash<pre><code>cargo run   \n</code></pre> <p>This directly runs the project. </p> </li> <li> <p><code>cargo build</code> vs <code>cargo run</code>:</p> <p><code>cargo build</code> will only compile the code but not run it. To run it, the developer would need to manually execute the output binary in <code>target/debug</code> directory.</p> <p><code>cargo run</code> will compile the code and also run it, combining two steps into one. This reduces the hassle of directing to the output binary and manually executing the program.</p> </li> </ol> <p>Note</p> <p>Both build + ./target/debug/hello_world and run have similar functions, but should be used in different circumstances. If you need to run the same file over and over again then build will be preferrable while if you only need to run the program once then it's better to use run.</p>"}]}